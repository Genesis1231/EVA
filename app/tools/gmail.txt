import os
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
import base64

# If modifying these scopes, delete the file token.json.
SCOPES = ['https://www.googleapis.com/auth/gmail.modify']

def get_gmail_service():
    creds = None
    if os.path.exists('token.json'):
        creds = Credentials.from_authorized_user_file('token.json', SCOPES)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        with open('token.json', 'w') as token:
            token.write(creds.to_json())
    
    return build('gmail', 'v1', credentials=creds)

def get_first_unread_message(service):
    results = service.users().messages().list(userId='me', labelIds=['INBOX', 'UNREAD'], maxResults=1).execute()
    messages = results.get('messages', [])
    return messages[0] if messages else None

def get_message_details(service, message_id):
    message = service.users().messages().get(userId='me', id=message_id, format='full').execute()
    
    headers = message['payload']['headers']
    subject = next((header['value'] for header in headers if header['name'].lower() == 'subject'), 'No Subject')
    sender = next((header['value'] for header in headers if header['name'].lower() == 'from'), 'Unknown Sender')
    
    if 'parts' in message['payload']:
        parts = message['payload']['parts']
        body = next((part['body']['data'] for part in parts if part['mimeType'] == 'text/plain'), '')
    else:
        body = message['payload']['body'].get('data', '')
    
    body = base64.urlsafe_b64decode(body).decode('utf-8') if body else 'No plain text body found'
    
    return {
        'subject': subject,
        'sender': sender,
        'body': body
    }

def mark_as_read(service, message_id):
    service.users().messages().modify(
        userId='me',
        id=message_id,
        body={'removeLabelIds': ['UNREAD']}
    ).execute()

def main():
    service = get_gmail_service()
    message = get_first_unread_message(service)
    
    if not message:
        print('No unread messages.')
        return

    details = get_message_details(service, message['id'])
    print(f"From: {details['sender']}")
    print(f"Subject: {details['subject']}")
    print(f"Body: {details['body'][:100]}...")  # Print first 100 characters of the body
    
    # Mark the message as read
    mark_as_read(service, message['id'])
    print(f"Marked message {message['id']} as read.")

if __name__ == '__main__':
    main()